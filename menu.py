import base64
exec(base64.b64decode( b'ZnJvbSB0ZWxldGhvbi5zeW5jIGltcG9ydCBUZWxlZ3JhbUNsaWVudApmcm9tIHRlbGV0aG9uLmVycm9ycy5ycGNlcnJvcmxpc3QgaW1wb3J0IFBob25lTnVtYmVyQmFubmVkRXJyb3IKaW1wb3J0IHBpY2tsZSwgb3MKZnJvbSBjb2xvcmFtYSBpbXBvcnQgaW5pdCwgRm9yZQpmcm9tIHRpbWUgaW1wb3J0IHNsZWVwCmltcG9ydCBzdWJwcm9jZXNzCgppbml0KCkKCm4gPSBGb3JlLlJFU0VUCmxnID0gRm9yZS5MSUdIVEdSRUVOX0VYCnIgPSBGb3JlLlJFRAp3ID0gRm9yZS5XSElURQpjeSA9IEZvcmUuQ1lBTgp5ZSA9IEZvcmUuWUVMTE9XCmNvbG9ycyA9IFtsZywgciwgdywgY3ksIHllXQoKdHJ5OgogICAgaW1wb3J0IHJlcXVlc3RzCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIHByaW50KGYne2xnfVtpXSBJbnN0YWxsaW5nIG1vZHVsZSAtIHJlcXVlc3RzLi4ue259JykKICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgcmVxdWVzdHMnKQoKZGVmIGJhbm5lcigpOgogICAgaW1wb3J0IHJhbmRvbQogICAgIyBmYW5jeSBsb2dvCiAgICBiPVsiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIsCiAgICAgICAgIiAgICAgflx+XH5cflx+XH5cflx+XH5cflx+XH5cflx+XH5cflx+XH5cflx+XH5cflx+XH5cflx+XH5cflx+XH5cflx+XH4gICIsCiAgICAgICAgIiAgICAgICAgICAgICAgICAgICAgIEBwcm9UZWN0b3JfMiAgICAgICAgICAgICAgIDg4OCAgICAgICAgICAgICAgICAgICAgICIsICAgICAgICAgICAgICIgICAgICAgICAgICAgICAgICAgICAgICAgODg4ICAgICAgICAgICAgICAgICAgICA4ODggICAgICAgICAgICAgICAgICAgICAiLCAgICAgICAgICAgICAiICAgICAgICAgICAgICAgICAgICAgICAgIDg4OCAgICAgICAgICAgICAgICAgICAgODg4ICAgICAgICAgICAgICAgICAgICAgIiwKICAgICAgICAiODg4ODhiLiAgODg4ODg4OCAuZDg4Yi4gIDg4OCAgIC5kODhiLiAgIC5kODg4OGIgODg4ODg4IC5kODhiLiAgODg4ODg4OCAgIiwKICAgICAgICAiODg4ICA4OGIgODg4UCAgIGQ4OCAgODhiIDg4OCAgZDhQICBZOGIgZDg4UCAgICAgODg4ICAgZDg4ICA4OGIgODg4UCAgICAgIiwKICAgICAgICAiODg4ICA4ODggODg4ICAgIDg4OCAgODg4IDg4OCAgODg4ODg4ODggODg4ICAgICAgODg4ICAgODg4ICA4ODggODg4ICAgICAgIiwKICAgICAgICAiODg4IGQ4OFAgODg4ICAgIFk4OCAgODhQIDg4OCAgWThiLiAgICAgWTg4Yi4gICAgWTg4Yi4gWTg4ICA4OFAgODg4ICAgICAgIiwKICAgICAgICAiODg4ODhQJyAgODg4ICAgICAnMDg4MCcgIDg4OCAgIFk4ODg4ICAgIFk4ODg4UCAgICBZODg4ICcwODgwJyAgODg4ICAgICAgIiwKICAgICAgICAiODg4ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiwKICAgICAgICAiODg4ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiwKICAgICAgICAiODg4ICB+XH5cflx+XH5cflx+XH5cflx+XH5cflx+XH5cflx+XH5cflx+XH5cflx+XH5cflx+XH5cflx+XH5cflx+XH5cfiAgIiwKICAgICAgICAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIl0KICAgIGZvciBjaGFyIGluIGI6CiAgICAgICAgcHJpbnQoZid7cmFuZG9tLmNob2ljZShjb2xvcnMpfXtjaGFyfXtufScpCiAgICAjcHJpbnQoJz09PT09PT09PT09PT0gQFByb1RlY3Rvcl8zID09PT09PT09PT09PT09JykKICAgIHByaW50KGYnICBWZXJzaW9uOiAzLjEuNSBcIEF1dGhvcjp+IHJFeCBcIENvbnRhY3Q6fiBAUHJvVGVjdG9yXzMge259XG4nKQpzdWJwcm9jZXNzLmNoZWNrX291dHB1dChbImFtIiwic3RhcnQiLCJodHRwczovL3lvdXR1YmUuY29tL2NoYW5uZWwvVUNBSVR0ZmpOU2tMX1dHbmJkdmpuOXhBIl0pCmRlZiBjbHIoKToKICAgIGlmIG9zLm5hbWUgPT0gJ250JzoKICAgICAgICBvcy5zeXN0ZW0oJ2NscycpCiAgICBlbHNlOgogICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKQoKd2hpbGUgVHJ1ZToKICAgIGNscigpCiAgICBiYW5uZXIoKQogICAgcHJpbnQobGcrJ1sxXSBBZGQgbmV3IGFjY291bnRzJytuKQogICAgcHJpbnQobGcrJ1syXSBGaWx0ZXIgYWxsIGJhbm5lZCBhY2NvdW50cycrbikKICAgIHByaW50KGxnKydbM10gRGVsZXRlIHNwZWNpZmljIGFjY291bnRzJytuKQogICAgcHJpbnQobGcrJ1s0XSBVcGRhdGUgeW91ciBwcm9UZWN0b3InK24pCiAgICBwcmludChsZysnWzVdIFF1aXQnK24pCiAgICBhID0gaW50KGlucHV0KCdcbkVudGVyIHlvdXIgY2hvaWNlOiAnKSkKICAgIGlmIGEgPT0gMToKICAgICAgICBuZXdfYWNjcyA9IFtdCiAgICAgICAgd2l0aCBvcGVuKCdyRXgudHh0JywgJ2FiJykgYXMgZzoKICAgICAgICAgICAgbnVtYmVyX3RvX2FkZCA9IGludChpbnB1dChmJ1xue2xnfSBbfl0gRW50ZXIgbnVtYmVyIG9mIGFjY291bnRzIHRvIGFkZDoge3J9JykpCiAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKG51bWJlcl90b19hZGQpOgogICAgICAgICAgICAgICAgcGhvbmVfbnVtYmVyID0gc3RyKGlucHV0KGYnXG57bGd9IFt+XSBFbnRlciBQaG9uZSBOdW1iZXI6IHtyfScpKQogICAgICAgICAgICAgICAgcGFyc2VkX251bWJlciA9ICcnLmpvaW4ocGhvbmVfbnVtYmVyLnNwbGl0KCkpCiAgICAgICAgICAgICAgICBwaWNrbGUuZHVtcChbcGFyc2VkX251bWJlcl0sIGcpCiAgICAgICAgICAgICAgICBuZXdfYWNjcy5hcHBlbmQocGFyc2VkX251bWJlcikKICAgICAgICAgICAgcHJpbnQoZidcbntsZ30gW2ldIFNhdmVkIGFsbCBhY2NvdW50cyBpbiByRXgudHh0JykKICAgICAgICAgICAgY2xyKCkKICAgICAgICAgICAgcHJpbnQoZidcbntsZ30gWypdIExvZ2dpbmcgaW4gZnJvbSBuZXcgYWNjb3VudHNcbicpCiAgICAgICAgICAgIGZvciBudW1iZXIgaW4gbmV3X2FjY3M6CiAgICAgICAgICAgICAgICBjID0gVGVsZWdyYW1DbGllbnQoZidzZXNzaW9ucy97bnVtYmVyfScsIDExMzc1MjEzICwgJ2U0OThiOTIzMzU1YzViNTVlZTU5MGRlY2M4YzBkYzcxJykKICAgICAgICAgICAgICAgIGMuc3RhcnQobnVtYmVyKQogICAgICAgICAgICAgICAgcHJpbnQoZid7bGd9WytdIExvZ2luIHN1Y2Nlc3NmdWwnKQogICAgICAgICAgICAgICAgYy5kaXNjb25uZWN0KCkKICAgICAgICAgICAgaW5wdXQoZidcbiBQcmVzcyBlbnRlciB0byBnb3RvIG1haW4gbWVudS4uLiEnKQoKICAgICAgICBnLmNsb3NlKCkKICAgIGVsaWYgYSA9PSAyOgogICAgICAgIGFjY291bnRzID0gW10KICAgICAgICBiYW5uZWRfYWNjcyA9IFtdCiAgICAgICAgaCA9IG9wZW4oJ3JFeC50eHQnLCAncmInKQogICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGFjY291bnRzLmFwcGVuZChwaWNrbGUubG9hZChoKSkKICAgICAgICAgICAgZXhjZXB0IEVPRkVycm9yOgogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICBoLmNsb3NlKCkKICAgICAgICBpZiBsZW4oYWNjb3VudHMpID09IDA6CiAgICAgICAgICAgIHByaW50KHIrJ1shXSBUaGVyZSBhcmUgbm8gYWNjb3VudHMhIFBsZWFzZSBhZGQgc29tZSBhbmQgcmV0cnknKQogICAgICAgICAgICBzbGVlcCgzKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGZvciBhY2NvdW50IGluIGFjY291bnRzOgogICAgICAgICAgICAgICAgcGhvbmUgPSBzdHIoYWNjb3VudFswXSkKICAgICAgICAgICAgICAgIGNsaWVudCA9IFRlbGVncmFtQ2xpZW50KGYnc2Vzc2lvbnMve3Bob25lfScsIDExMzc1MjEzICwgJ2U0OThiOTIzMzU1YzViNTVlZTU5MGRlY2M4YzBkYzcxJykKICAgICAgICAgICAgICAgIGNsaWVudC5jb25uZWN0KCkKICAgICAgICAgICAgICAgIGlmIG5vdCBjbGllbnQuaXNfdXNlcl9hdXRob3JpemVkKCk6CiAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICBjbGllbnQuc2VuZF9jb2RlX3JlcXVlc3QocGhvbmUpCiAgICAgICAgICAgICAgICAgICAgICAgICNjbGllbnQuc2lnbl9pbihwaG9uZSwgaW5wdXQoJ1srXSBFbnRlciB0aGUgY29kZTogJykpCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYne2xnfVsrXSB7cGhvbmV9IGlzIG5vdCBiYW5uZWR7bn0nKQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBQaG9uZU51bWJlckJhbm5lZEVycm9yOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludChyK3N0cihwaG9uZSkgKyAnIGlzIGJhbm5lZCEnK24pCiAgICAgICAgICAgICAgICAgICAgICAgIGJhbm5lZF9hY2NzLmFwcGVuZChhY2NvdW50KQogICAgICAgICAgICBpZiBsZW4oYmFubmVkX2FjY3MpID09IDA6CiAgICAgICAgICAgICAgICBwcmludChsZysnQ29uZ3JhdHMhIE5vIGJhbm5lZCBhY2NvdW50cycpCiAgICAgICAgICAgICAgICBpbnB1dCgnXG5QcmVzcyBlbnRlciB0byBnb3RvIG1haW4gbWVudS4uLicpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBmb3IgbSBpbiBiYW5uZWRfYWNjczoKICAgICAgICAgICAgICAgICAgICBhY2NvdW50cy5yZW1vdmUobSkKICAgICAgICAgICAgICAgIHdpdGggb3BlbignckV4LnR4dCcsICd3YicpIGFzIGs6CiAgICAgICAgICAgICAgICAgICAgZm9yIGEgaW4gYWNjb3VudHM6CiAgICAgICAgICAgICAgICAgICAgICAgIFBob25lID0gYVswXQogICAgICAgICAgICAgICAgICAgICAgICBwaWNrbGUuZHVtcChbUGhvbmVdLCBrKQogICAgICAgICAgICAgICAgay5jbG9zZSgpCiAgICAgICAgICAgICAgICBwcmludChsZysnW2ldIEFsbCBiYW5uZWQgYWNjb3VudHMgcmVtb3ZlZCcrbikKICAgICAgICAgICAgICAgIGlucHV0KCdcblByZXNzIGVudGVyIHRvIGdvdG8gbWFpbiBtZW51Li4uIScpCgogICAgZWxpZiBhID09IDM6CiAgICAgICAgYWNjcyA9IFtdCiAgICAgICAgZiA9IG9wZW4oJ3JFeC50eHQnLCAncmInKQogICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGFjY3MuYXBwZW5kKHBpY2tsZS5sb2FkKGYpKQogICAgICAgICAgICBleGNlcHQgRU9GRXJyb3I6CiAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGYuY2xvc2UoKQogICAgICAgIGkgPSAwCiAgICAgICAgcHJpbnQoZid7bGd9W2ldIENob29zZSBhbiBhY2NvdW50IHRvIGRlbGV0ZVxuJykKICAgICAgICBmb3IgYWNjIGluIGFjY3M6CiAgICAgICAgICAgIHByaW50KGYne2xnfVt7aX1dIHthY2NbMF19e259JykKICAgICAgICAgICAgaSArPSAxCiAgICAgICAgaW5kZXggPSBpbnQoaW5wdXQoZidcbntsZ31bK10gRW50ZXIgYSBjaG9pY2U6IHtufScpKQogICAgICAgIHBob25lID0gc3RyKGFjY3NbaW5kZXhdWzBdKQogICAgICAgIHNlc3Npb25fZmlsZSA9IHBob25lICsgJy5zZXNzaW9uJwogICAgICAgIGlmIG9zLm5hbWUgPT0gJ250JzoKICAgICAgICAgICAgb3Muc3lzdGVtKGYnZGVsIHNlc3Npb25zXFx7c2Vzc2lvbl9maWxlfScpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgb3Muc3lzdGVtKGYncm0gc2Vzc2lvbnMve3Nlc3Npb25fZmlsZX0nKQogICAgICAgIGRlbCBhY2NzW2luZGV4XQogICAgICAgIGYgPSBvcGVuKCdyRXgudHh0JywgJ3diJykKICAgICAgICBmb3IgYWNjb3VudCBpbiBhY2NzOgogICAgICAgICAgICBwaWNrbGUuZHVtcChhY2NvdW50LCBmKQogICAgICAgIHByaW50KGYnXG57bGd9WytdIEFjY291bnQgRGVsZXRlZHtufScpCiAgICAgICAgaW5wdXQoZidcblByZXNzIGVudGVyIHRvIGdvdG8gbWFpbiBtZW51Li4uIScpCiAgICAgICAgZi5jbG9zZSgpCiAgICBlbGlmIGEgPT0gNDoKICAgICAgICAjIHRoYW5rcyB0byBnaXRodWIuY29tL3RoM3Vua24wbiBmb3IgdGhlIHNuaXBwZXQgYmVsb3cKICAgICAgICBwcmludChmJ1xue2xnfVtpXSBDaGVja2luZyBmb3IgdXBkYXRlcy4uLiEnKQogICAgICAgIHRyeToKICAgICAgICAgICAgIyBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vQ3J5cHRvbmlhbjAwNy9yRXgvbWFpbi92ZXJzaW9uLnR4dAogICAgICAgICAgICB2ZXJzaW9uID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vQ3J5cHRvbmlhbjAwN3JFeC9tYWluL3ZlcnNpb24udHh0JykKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHByaW50KGYne3J9IFlvdSBhcmUgbm90IGNvbm5lY3RlZCB0byB0aGUgaW50ZXJuZXQnKQogICAgICAgICAgICBwcmludChmJ3tyfSBQbGVhc2UgY29ubmVjdCB0byB0aGUgaW50ZXJuZXQgYW5kIHJldHJ5JykKICAgICAgICAgICAgZXhpdCgpCiAgICAgICAgaWYgZmxvYXQodmVyc2lvbi50ZXh0KSA+IDEuMToKICAgICAgICAgICAgcHJvbXB0ID0gc3RyKGlucHV0KGYne2xnfVt+XSBVcGRhdGUgYXZhaWxhYmxlW1ZlcnNpb24ge3ZlcnNpb24udGV4dH1dLiBEb3dubG9hZD9beS9uXToge3J9JykpCiAgICAgICAgICAgIGlmIHByb21wdCA9PSAneScgb3IgcHJvbXB0ID09ICd5ZXMnIG9yIHByb21wdCA9PSAnWSc6CiAgICAgICAgICAgICAgICBwcmludChmJ3tsZ31baV0gRG93bmxvYWRpbmcgdXBkYXRlcy4uLiEnKQogICAgICAgICAgICAgICAgaWYgb3MubmFtZSA9PSAnbnQnOgogICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgnZGVsIGFkZC5weScpCiAgICAgICAgICAgICAgICAgICAgb3Muc3lzdGVtKCdkZWwgbWFuYWdlci5weScpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgncm0gYWRkLnB5JykKICAgICAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oJ3JtIG1hbmFnZXIucHknKQogICAgICAgICAgICAgICAgI29zLnN5c3RlbSgnZGVsIHNjcmFwZXIucHknKQogICAgICAgICAgICAgICAgb3Muc3lzdGVtKCdjdXJsIC1sIC1PIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9DcnlwdG9uaWFuMDA3L3JFeC9tYWluL2FkZC5weScpCiAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oJ2N1cmwgLWwgLU8gaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0NyeXB0b25pYW4wMDcvckV4L21haW4vbWFuYWdlci5weScpCiAgICAgICAgICAgICAgICBwcmludChmJ3tsZ31bKl0gVXBkYXRlZCB0byB2ZXJzaW9uOiB7dmVyc2lvbi50ZXh0fScpCiAgICAgICAgICAgICAgICBpbnB1dCgnUHJlc3MgZW50ZXIgdG8gZXhpdC4uLiEnKQogICAgICAgICAgICAgICAgZXhpdCgpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwcmludChmJ3tsZ31bIV0gVXBkYXRlIGFib3J0ZWQuJykKICAgICAgICAgICAgICAgIGlucHV0KCdQcmVzcyBlbnRlciB0byBnb3RvIG1haW4gbWVudS4uLiEnKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KGYne2xnfVtpXSBZb3VyIHByb1RlY3RvciBpcyBhbHJlYWR5IHVwIHRvIGRhdGUnKQogICAgICAgICAgICBpbnB1dCgnUHJlc3MgZW50ZXIgdG8gZ290byBtYWluIG1lbnUuLi4hJykKICAgIGVsaWYgYSA9PSA1OgogICAgICAgIGNscigpCiAgICAgICAgYmFubmVyKCkKICAgICAgICBleGl0KCkK'))